service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-offline

provider:
  name: aws
  runtime: nodejs8.10

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  environment:
    TODOS_TABLE: Todos-${self:provider.stage}
    USERID_INDEX: UserIdIndex
    IMAGES_S3_BUCKET: serverless-images-mnfgul-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

functions:

  # Custom Authorizer function for API Gateway
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # Get Todo function
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
        -   Effect: Allow
            Action:
                - dynamodb:Query
                - dynamodb:Scan
            Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
        -   Effect: Allow
            Action:
              - xray:GetSamplingRules
              - xray:GetSamplingTargets
              - xray:GetSamplingStatisticSummaries
              - xray:BatchGetTraces
              - xray:GetServiceGraph
              - xray:GetTraceGraph
              - xray:GetTraceSummaries
              - xray:GetGroups
              - xray:GetGroup
              - xray:PutTraceSegments
            Resource:
              - "*"

  # Create Todo functions
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
            - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

# Update Todo function
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
     - http:
        method: patch
        path: todos/{todoId}
        cors: true
        authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
            - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
            - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USERID_INDEX}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

  # Delete Todo Function
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler

    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USERID_INDEX}
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"
    
  # Get Upload URL function
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
            method: post
            path: todos/{todoId}/attachment
            cors: true
            authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.USERID_INDEX}
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*  
      - Effect: Allow
        Action:
          - xray:GetSamplingRules
          - xray:GetSamplingTargets
          - xray:GetSamplingStatisticSummaries
          - xray:BatchGetTraces
          - xray:GetServiceGraph
          - xray:GetTraceGraph
          - xray:GetTraceSummaries
          - xray:GetGroups
          - xray:GetGroup
          - xray:PutTraceSegments
        Resource:
          - "*"

resources:
  Resources:
    
    # APIGateway CORS header configuration
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PATCH,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    # Dynamo DB Table configuration
    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TODOS_TABLE}
        AttributeDefinitions:
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: todoId
            KeyType: HASH
          - AttributeName: createdAt
            KeyType: RANGE
      
        BillingMode: PAY_PER_REQUEST
        
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.USERID_INDEX}
            KeySchema:
              - AttributeName: todoId
                KeyType: HASH
              - AttributeName: userId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        
    # S3 bucket and bucket policy configuration
    AttachmentsBucket:
        Type: AWS::S3::Bucket
        Properties:
            BucketName: ${self:provider.environment.IMAGES_S3_BUCKET}
            CorsConfiguration:
                CorsRules:
                    - 
                        AllowedOrigins:
                            - '*'
                        AllowedHeaders:
                            - '*'
                        AllowedMethods:
                            - GET
                            - PUT
                            - POST
                            - DELETE
                            - HEAD
                        MaxAge: 3000
      
    BucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
            PolicyDocument:
                Id: MyPolicy
                Version: "2012-10-17"
                Statement:
                    -   Sid: PublicReadWriteBucketPolicy
                        Effect: Allow
                        Principal: '*'
                        Action: 
                            - s3:GetObject
                            - s3:PutObject
                        Resource: 'arn:aws:s3:::${self:provider.environment.IMAGES_S3_BUCKET}/*'
            Bucket: !Ref AttachmentsBucket
  